[{"C:\\study\\type_react\\src\\route.js":"1","C:\\study\\type_react\\src\\components\\test\\Card\\CardPresenter.tsx":"2","C:\\study\\type_react\\src\\pages\\test\\styles.ts":"3","C:\\study\\type_react\\src\\styles\\styles.ts":"4","C:\\study\\type_react\\src\\styles\\GlobalStyles.ts":"5","C:\\study\\type_react\\src\\apollo\\client.ts":"6","C:\\study\\type_react\\src\\pages\\index.ts":"7","C:\\study\\type_react\\src\\pages\\auth\\AuthContainer.tsx":"8","C:\\study\\type_react\\src\\pages\\test\\TestContainer.tsx":"9","C:\\study\\type_react\\src\\pages\\feed\\FeedContainer.tsx":"10","C:\\study\\type_react\\src\\graphql\\auth.ts":"11","C:\\study\\type_react\\src\\pages\\feed\\FeedPresenter.tsx":"12","C:\\study\\type_react\\src\\pages\\test\\TestPresenter.tsx":"13","C:\\study\\type_react\\src\\pages\\auth\\AuthPresenter.tsx":"14","C:\\study\\type_react\\src\\components\\CardComponent1.js":"15","C:\\study\\type_react\\src\\ImgData.tsx":"16","C:\\study\\type_react\\src\\components\\auth\\JoinForm.tsx":"17"},{"size":1333,"mtime":1610194155146,"results":"18","hashOfConfig":"19"},{"size":4214,"mtime":1611154739921,"results":"20","hashOfConfig":"19"},{"size":2931,"mtime":1610891266171,"results":"21","hashOfConfig":"19"},{"size":4477,"mtime":1610730320316,"results":"22","hashOfConfig":"19"},{"size":199,"mtime":1609332880269,"results":"23","hashOfConfig":"19"},{"size":1054,"mtime":1609332880193,"results":"24","hashOfConfig":"19"},{"size":208,"mtime":1610108966441,"results":"25","hashOfConfig":"19"},{"size":3878,"mtime":1609339601518,"results":"26","hashOfConfig":"19"},{"size":187,"mtime":1610192292269,"results":"27","hashOfConfig":"19"},{"size":1522,"mtime":1609950140565,"results":"28","hashOfConfig":"19"},{"size":811,"mtime":1609339603786,"results":"29","hashOfConfig":"19"},{"size":1633,"mtime":1610027612861,"results":"30","hashOfConfig":"19"},{"size":398,"mtime":1610108409213,"results":"31","hashOfConfig":"19"},{"size":1303,"mtime":1609332880230,"results":"32","hashOfConfig":"19"},{"size":3328,"mtime":1610105682890,"results":"33","hashOfConfig":"19"},{"size":6281,"mtime":1609585368346,"results":"34","hashOfConfig":"19"},{"size":3785,"mtime":1609585286483,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"13q86fw",{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"45"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"39"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\study\\type_react\\src\\route.js",["76"],"import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { Auth, Feed, Test } from \"./pages\";\r\nimport React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nconst LoginRoute = () => {\r\n    return(\r\n    <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Feed} />\r\n                <Route exact path=\"/test\" component={Test} />\r\n            </Switch>\r\n        </BrowserRouter>);\r\n};\r\n\r\n//const isLogin = false;\r\n\r\nconst LogoutRoute = () => {\r\n    return(\r\n    <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Auth} />\r\n            </Switch>\r\n        </BrowserRouter>);\r\n};\r\n\r\nconst Routes = () => {\r\n    const IS_LOGIN = gql`\r\n    {\r\n        isLogin @client \r\n    }\r\n\r\n    `;\r\n\r\n    const{\r\n            data:{isLogin},\r\n        } = useQuery(IS_LOGIN);\r\n    \r\n        return true ? <LoginRoute/> : <LogoutRoute/>;\r\n    };\r\n    \r\n     \r\n\r\n// 라우터에 여러 페이지를 만들어서 -> App에 임포트 시키고 -> index에서 가상돔에 넣어준다\r\n// BrowserRouter - HTML5의 history API를 활용하여 UI를 업데이트(동적인 페이지)\r\n// Switch - path의 충돌이 일어나지 않게 <Route>들을 관리\r\n// Route - 요청받은 pathname에 해당하는 컴포넌트를 렌더링\r\n\r\nexport default Routes;",["77","78"],"C:\\study\\type_react\\src\\components\\test\\Card\\CardPresenter.tsx",["79","80","81","82"],"import { Box, IconButton, Input } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { MuiPaper, useStyles } from \"../../../pages/test/styles\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport TurnedInNotIcon from \"@material-ui/icons/TurnedInNot\";\r\nimport { Favorite } from \"@material-ui/icons\";\r\nimport { getArgumentValues } from \"graphql/execution/values\";\r\nimport { Text } from \"../../../styles/styles\";\r\n\r\n\r\ninterface ICard{\r\n    toggleLike: () => void;\r\n    fill: boolean;\r\n    handleText: (args: string) => void;\r\n    text: string;\r\n    onSubmit:(arg: string) => void;\r\n    comments: Array<{ squares: Array<string> }>;\r\n}\r\n\r\nconst CardPresenter = (props: ICard) => {\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        \r\n        <MuiPaper className={classes.paper} elevation={3}> {/*elevation : 종이 섀도우*/}\r\n\r\n            <Box className={classes.header}>\r\n                <Box display={\"flex\"} flex-direction={\"row\"}>\r\n                    <img className={classes.avatar} src={\"/img/images.jpg\"} />\r\n                    <span className={classes.name}> trond._.s </span>\r\n                        \r\n                </Box>\r\n                <Box>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </Box>\r\n            </Box>\r\n            <Box className={classes.img_box}>\r\n                <img \r\n                    className={classes.img_box}\r\n                    src={\"/img/lo.jpg\"}/>\r\n            </Box>\r\n            <Box className={classes.btn_box}>\r\n                <Box>\r\n                    <IconButton onClick={props.toggleLike}>\r\n                        {props.fill ? <Favorite style={{ fill: \"red\" }} /> : <FavoriteBorderIcon />}\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ChatBubbleOutlineIcon />\r\n                    </IconButton>\r\n                </Box>\r\n                <Box>\r\n                    <IconButton>\r\n                        <TurnedInNotIcon />\r\n                    </IconButton>\r\n                </Box>\r\n            </Box>\r\n            <Box className={classes.count}>조회수 12,121회</Box>\r\n            <Box>\r\n                <Box className={classes.prag_b} display={\"flex\"} flex-direction={\"row\"}>{/* 본문쓸자리 */}\r\n                        <span className={classes.com1}>trond._.s</span>\r\n                        &nbsp;\r\n                        <span text-overflow={\"ellipsis\"}>{/*줄바꿈해주는줄*/}\r\n                            이것은 아마도 본문일껄ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ줄바꿈되라\r\n                        </span> \r\n                </Box>\r\n                <Box>{/* 댓글 표시 */}\r\n                    <div className={classes.prag_c}>\r\n                        {props.comments.map((comment, index) => (\r\n                            /*<Box display={\"flex\"} flex-direction={\"column\"}>*/\r\n                            <span text-overflow={\"ellipsis\"}><ul key={index}><li className={classes.line}><span className={classes.com1}>gamzya </span>&nbsp; {comment}</li> </ul></span>\r\n                            /*</Box>*/\r\n                            ))}\r\n                    </div>\r\n                </Box>\r\n            </Box>\r\n            <Box className={classes.prag_c}>{/* 댓글 입력 */}\r\n                <form onSubmit={(e)=>{//댓글입력 시 리프레쉬를 방지\r\n                    e.preventDefault();\r\n                        props.onSubmit(props.text);\r\n                        }}>\r\n                    <Input \r\n                            className={classes.input_com}\r\n                            onChange={(e)=> props.handleText(e.target.value)} //handleChange\r\n                            placeholder=\"댓글달기...\"\r\n                            value={props.text} />\r\n                </form>\r\n            </Box>\r\n        \r\n        </MuiPaper>\r\n        \r\n        );\r\n}\r\n\r\nexport default CardPresenter;","C:\\study\\type_react\\src\\pages\\test\\styles.ts",[],["83","84"],"C:\\study\\type_react\\src\\styles\\styles.ts",[],"C:\\study\\type_react\\src\\styles\\GlobalStyles.ts",[],"C:\\study\\type_react\\src\\apollo\\client.ts",[],"C:\\study\\type_react\\src\\pages\\index.ts",[],"C:\\study\\type_react\\src\\pages\\auth\\AuthContainer.tsx",[],"C:\\study\\type_react\\src\\pages\\test\\TestContainer.tsx",[],"C:\\study\\type_react\\src\\pages\\feed\\FeedContainer.tsx",[],"C:\\study\\type_react\\src\\graphql\\auth.ts",[],"C:\\study\\type_react\\src\\pages\\feed\\FeedPresenter.tsx",["85","86","87"],"import React , { Fragment, MutableRefObject } from \"react\";\r\nimport styled from \"styled-components\"\r\nimport { img } from \"../../FeedMe\"\r\nimport  CardCompnent1 from \"../../components/CardComponent1\";\r\n\r\nconst Wrapper = styled.div`\r\n    height: 100vh;\r\n    width: 100%;\r\n    padding: 25px 100px;\r\n    overflow-y: scroll;\r\n`;\r\n\r\nconst GridBox = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: repeat(4,1fr); \r\ngrid-gap: 10px;\r\n`;\r\n\r\nconst ImgBox = styled.img`\r\n    width: 100%;\r\n    border-radius: 10px;\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n    position: absolute;\r\n    z-index: 10;\r\n    background-color : rgba(0, 0, 0, 0.8);\r\n    width : 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst Card = styled.div`\r\n    position: absolute;\r\n    z-index: 10;\r\n    background-color : rgba(0, 0, 0, 0.8);\r\n    width : 100%;\r\n    height: 100%;\r\n`;\r\n\r\ninterface IProps{ \r\n    scrollEl : MutableRefObject<any>;\r\n    handleScroll: () => void;\r\n    count: number;\r\n    loading: boolean;\r\n}\r\n\r\nconst FeedPresenter = (props: IProps) => {\r\n    return(\r\n     <Fragment>\r\n         {props.loading ? <Overlay /> : null }\r\n         <Wrapper \r\n            id=\"wrapper\"\r\n            ref={props.scrollEl}\r\n         >\r\n            <GridBox>\r\n            {/*map함수 = >for이랑 같은 반복문 배열의 length만큼 반복해주는함수*/}\r\n            {/*{img.map((element,index) => {   \r\n                if(index<props.count){\r\n                return <ImgBox src={element.src} alt =\"\" />;\r\n                }\r\n            })}*/}\r\n            <CardCompnent1 />\r\n            </GridBox>\r\n        </Wrapper>\r\n    </Fragment>\r\n    );\r\n};\r\n\r\nexport default FeedPresenter;","C:\\study\\type_react\\src\\pages\\test\\TestPresenter.tsx",[],"C:\\study\\type_react\\src\\pages\\auth\\AuthPresenter.tsx",[],"C:\\study\\type_react\\src\\components\\CardComponent1.js",["88","89"],"import React, { Component } from 'react';\r\nimport styled from \"styled-components\"\r\nimport { Card, Box, Button, Wrapper, Text } from \"../styles/styles\";\r\nimport { FiHeart, FiSend } from \"react-icons/fi\"; //아이콘\r\nimport { BsChat, BsBookmark } from \"react-icons/bs\"; //아이콘\r\n\r\n \r\nclass CardCompnent extends Component{\r\n    render(){\r\n        return (\r\n    <Wrapper \r\n        width={\"100%\"} \r\n        height={\"100%\"} \r\n        backgroundColor={\"#fafafa\"}\r\n        margin={\"0px\"}\r\n        >\r\n        <Box //카드\r\n            alignItems={\"center\"}\r\n            backgroundColor={\"#ffffff\"}\r\n            flexDirection={\"column\"}\r\n            width={\"600px\"}\r\n            height={\"900px\"}\r\n            border={\"2px #BDBDBD solid\"}\r\n            border-radius={\"3px\"}\r\n            boxSizing= {\"content-box\"} //내용물 정렬\r\n            >\r\n            <Box //상단 계정부분\r\n                display={\"flex\"}//중요\r\n                width={\"600px\"} \r\n                height={\"60px\"}\r\n                padding={\"16px 40px 16px 16px\"}\r\n                verticalAlign={\"middle\"}\r\n                flexDirection={\"row\"}\r\n                >\r\n                <img src = {\"/img/lo.jpg\"} //계정 이미지\r\n                     alt=\"\"\r\n                     style={{\r\n                             borderRadius:30,\r\n                             height:42,\r\n                             width:42\r\n                            }}\r\n                      />\r\n                <Text\r\n                    padding={\"8px\"}>\r\n                     계정 이름\r\n                </Text>\r\n            </Box>\r\n\r\n            <Box> \r\n                <img src = {\"/img/moon.jpg\"}//게시글 이미지\r\n                    alt=\"\"\r\n                    style={{\r\n                            height:620,\r\n                            width:600,\r\n                            flex:1\r\n                            }}/>\r\n            </Box>\r\n\r\n        <Box style={{ //버튼\r\n                     align:\"left\",\r\n                     height:45,\r\n                     alignItems:\"stretch\",\r\n                     justifyContent:\"space-between\"\r\n                    }}>\r\n            \r\n                <Button>\r\n                    <FiHeart size=\"30\" />\r\n                </Button>\r\n                <Button>\r\n                    <BsChat size=\"30\" />\r\n                </Button>\r\n                <Button>\r\n                    <FiSend size=\"30\"/>\r\n                </Button>\r\n                \r\n                <Button >\r\n                    <BsBookmark size=\"30\" />\r\n                </Button>\r\n                \r\n                \r\n        </Box>\r\n\r\n        <Box style={{ height:40 }}>\r\n            <Text>좋아요 101개</Text>\r\n            \r\n        </Box>\r\n\r\n        <Box style={{ height:100 }}>\r\n            {/*<Text>\r\n                <Text style={{fontWeight:'900'}}> 계정이름 </Text>\r\n                #인스타그램 #따라하기 #리액트네이티브\r\n                이건 아마도 내용이겠지\r\n           </Text>*/}\r\n\r\n                계정 이름 \r\n                #인스타그램 #따라하기 #리액트\r\n                이건 아마도 내용이겠지\r\n\r\n        </Box>\r\n        <Box style={{ height:30 }} >\r\n\r\n           \r\n            댓글란\r\n        </Box>\r\n    </Box>\r\n</Wrapper>\r\n    \r\n        );\r\n    }\r\n}\r\nexport default CardCompnent;","C:\\study\\type_react\\src\\ImgData.tsx",[],"C:\\study\\type_react\\src\\components\\auth\\JoinForm.tsx",[],{"ruleId":"90","severity":1,"message":"91","line":36,"column":19,"nodeType":"92","messageId":"93","endLine":36,"endColumn":26},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":9,"column":10,"nodeType":"92","messageId":"93","endLine":9,"endColumn":27},{"ruleId":"98","severity":1,"message":"100","line":10,"column":10,"nodeType":"92","messageId":"93","endLine":10,"endColumn":14},{"ruleId":"101","severity":1,"message":"102","line":31,"column":21,"nodeType":"103","endLine":31,"endColumn":79},{"ruleId":"101","severity":1,"message":"102","line":42,"column":17,"nodeType":"103","endLine":44,"endColumn":42},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"104","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":13},{"ruleId":"98","severity":1,"message":"105","line":19,"column":7,"nodeType":"92","messageId":"93","endLine":19,"endColumn":13},{"ruleId":"98","severity":1,"message":"106","line":32,"column":7,"nodeType":"92","messageId":"93","endLine":32,"endColumn":11},{"ruleId":"90","severity":1,"message":"107","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"108","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":14},"no-unused-vars","'isLogin' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["109"],"no-negated-in-lhs",["110"],"@typescript-eslint/no-unused-vars","'getArgumentValues' is defined but never used.","'Text' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'img' is defined but never used.","'ImgBox' is assigned a value but never used.","'Card' is assigned a value but never used.","'styled' is defined but never used.","'Card' is defined but never used.","no-global-assign","no-unsafe-negation"]